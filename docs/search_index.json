[["index.html", "Get R Done! A travelers guide to the world of R Preface", " Get R Done! A travelers guide to the world of R Nathan L. Brouwer 2021-09-01 Preface This book will introduce you to key aspects of the R ecosytem. "],["what-is-r-and-why-use-it.html", "Chapter 1 What is R and why use it? 1.1 How do we typically use software in science? 1.2 What does R do? 1.3 Why use R 1.4 Who uses it? 1.5 R and computational reproducibility 1.6 Alternatives to R", " Chapter 1 What is R and why use it? NOTE: these notes are from a lecture and have not been re-written much yet R is a powerful piece of software used for data science, from routine data analysis with conventional statistics to machine learning. In this chapter I will briefly introduce the advantages of using R, why you might want to learn it, and also indicate some alternatives and adjuncts you could consider. 1.1 How do we typically use software in science? Most scientists rely on both general and specialized pieces of software for various parts of their work. For data entry they likely use spreadsheet software Excel or Google Sheets. For data analysis they might use one of many options, such as GraphPad Prism, Minitab, SAS, SPSS, or STATA. For making plots, many people will export their results back to Excel, while others use specialized software like SigmaPlot. Many scientists also use specialized programs. For example, in ecology, and environmental science and geology many researchers make an analyze maps using GIS (Geographic Information System) in ArcGIS or QGIS, and scientists in many fields use Mathematica to build mathematical models. Since software can be expensive, some scientists will rely on Excel for all of their work. Excel can do many things, but it can’t do everything all the specialized types of software can do. Moreover, its very limited in the range of statistics it can do and graphs it can make. 1.2 What does R do? R is amazing because it has been explicitly developed to do several things very well, particularly statistics, math, making great-looking figures, and writing computer programs to automate these tasks. Additionally, R has been extended by developers to bea powerful tool for data cleaning and organization, to be used as a GIS, and as an integrated word processor and website maker for publishing work. 1.3 Why use R In addition to is many capabilities, R has the advantage this it is free for everyone, always is used by statisticians to develop new statistical techniques, so new techniques often come out 1st in R has a user community known for valuing cooperation and inclusiveness is supported by a for-profit company, RStudio, that produces many free programs and services to support the community 1.4 Who uses it? R continues to increase in popularity. Among data scientists it is second only to Python, which borrows many of its data analysis ideas from R. Among academics it has eclipsed SAS in many fields. It is also used by analyses in many large companies, such Facebook, and by journalists looking for stories in or reporting on large volumes of data. (See http://blog.revolutionanalytics.com/2014/05/companies-using-r-in-2014.html for further discussion). 1.5 R and computational reproducibility One factor potentially contributing to R’s popularity – or at least a major bonus for using it – is ease of use for making analyses reproducible. All commands in R are typed out and the best way to do this is in a static script file from which you send commands to R to execute. This creates a record of your analyses. This feature is shared by other programs such as SAS and Stata, and other programming languages such as Matlab and Python. The advantage of R is that the script files are simply plain text files which anyone can open and - if they’ve downloaded R, which is free - they can run. Developers have also created numerous tools for creating reproducible analysis workflows and which allow R to be used in all data-related aspects of a project, from data cleaning to formatting journal submissions. What this means is that without becoming an expert programmer you can set up your work so that you can re-run all of your data cleaning, analyses, and graph building with a single command in R. This makes what you’ve done auditable, transparent, and easy to re-use for future work. 1.6 Alternatives to R R has many advantages, but it has one critical issue: the learning curve. R is a command-line driven analysis tool, which means you type out specific commands for almost everything single thing R does. Excel is pretty user friendly, and several stats programs similarly use point-and-click interfaces, such as SPSS, JMP, and Stata SAS also requires a lot of command writing, but is generally consider more user friendly than R. Recently, two free point-and-click statistical analysis programs have been release that are built on R but require no programming. JASP (“Just another statistics program”) has an emphasis on Bayesian statistics, particularly Bayesian hypothesis testing using Bayes factors (an approach increasing in popularity, especially in psychology, but which some Bayesians, like Andrew Gelman, disavow). While JASP is based on R, it does not currently allow access to the underlying R code. Jamovi has a similar spirit as JASP (indeed, it was founded by developers who had worked on JASP) but is more transparent about the underlying R code being used to run the analysis. "],["some-things-to-know-about-r-the-r-learning-ecosystem.html", "Chapter 2 Some things to know about R &amp; the R learning ecosystem", " Chapter 2 Some things to know about R &amp; the R learning ecosystem A note on programming idioms and dialects in R: R is an incredibly flexible programming language, which has many plusses but also many drawbacks. One of the drawbacks is that there are many different ways to do the same thing in R, which can be very confusing to new users, especially when you delve into internet resources. You can google “how to do xxxx in R” and get 5 results which each use a slightly different coding approach or perhaps completely different dialect of R. RStudio promotes the use of the standardized “Tidyverse’’ series of packages. This helps standardize approaches to coding and problem solving across a large number of tasks. The foundational packages of the tidyverse are the graphics package ggplot2 and the data manipulation package dplyr. ggplot2 has become probably the most powerful graphics approach in R (and has been cloned over to Python I believe), but it debated whether its easier to start off using ggplot2 and invest in its long-term use, or start out with classic R graphs (”base R graphics’’) which are much easier to get started with but much harder to ultimately master, and ultimately less powerful than ggplot2. ggplot2 has exploded in popularity over the last 5 years, but lots of older material on the internet and book use base R graphics. A solution I like for the ggplot2 vs. base R graphics is to use the ggpubr package. http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/ ggpubr is built on the ggplot2 engine but has functions that make it as easy as using base R to build basic plots. The documentation is also very good. Unfortunately it doesn’t seem to yet be very popular. I highly recommend checking it out though. "],["r-idioms.html", "Chapter 3 R Idioms 3.1 Quickstart Guide to R", " Chapter 3 R Idioms A note on programming idioms and dialects in R: R is an incredibly flexible programming language, which has many plusses but also many drawbacks. One of the drawbacks is that there are many different ways to do the same thing in R, which can be very confusing to new users, especially when you delve into internet resources. You can google “how to do xxxx in R” and get 5 results which each use a slightly different coding approach or perhaps completely different dialect of R. RStudio promotes the use of the standardized “Tidyverse’’ series of packages. This helps standardize approaches to coding and problem solving across a large number of tasks. The foundational packages of the tidyverse are the graphics package ggplot2 and the data manipulation package dplyr. ggplot2 has become probably the most powerful graphics approach in R (and has been cloned over to Python I believe), but it debated whether its easier to start off using ggplot2 and invest in its long-term use, or start out with classic R graphs (”base R graphics’’) which are much easier to get started with but much harder to ultimately master, and ultimately less powerful than ggplot2. ggplot2 has exploded in popularity over the last 5 years, but lots of older material on the internet and book use base R graphics. 3.1 Quickstart Guide to R Here’s an outline of the key steps to getting up and running using R. If you’ve programmed before then this should get you started. If you need more help – or when you need more help! – that’s what the rest of this guide is for. Get an account with RStudio Cloud: https://rstudio.cloud/ Look over the RStudio Cloud Primers and return to them as needed. Download the R desktop software [Windows]:(https://cran.r-project.org/bin/windows/base/ ): https://cran.r-project.org/bin/windows/base/ Mac: https://cran.r-project.org/bin/macosx/ Download the RStudio IDE. https://bit.ly/RSdesktop (there are Mac and PC versions). Download the swirl packages using the command install.packages(swirl), then start exploring the tutorials. "],["quickstartcode.html", "Chapter 4 Quickstart guide to learning R coding", " Chapter 4 Quickstart guide to learning R coding Here’s an outline of key steps to get started learning to run commands and write code using freely available, interactutorials. Check out the RStudio Cloud Primers The basics Working with data Install the swirl package To install swirl, In the R console run these commands: install.packages(&quot;swirl&quot;) library(&quot;swirl&quot;) Then download these two tutorials swirl::install_course(&quot;R Programming&quot;) swirl::install_course(&quot;The R Programming Environment&quot;) To get started with swirl type: swirl() swirl will guide you through the rest. Choose one of the R Programming tutorials. If you are asked for your Coursera information just skip this using the skip() command. "],["rstudio-cloud.html", "Chapter 5 RStudio Cloud 5.1 RStudio Cloud Installation Video 5.2 RStudio Cloud Primers", " Chapter 5 RStudio Cloud The easiest way to get started using R is to run it through your web browser using RStudio Cloud, which offers free accounts (https://rstudio.cloud/) with up to 15 hours of use per month. I believe Firefox and Chrome work best for using RStudio Cloud - nobody seems to get along well with Safari, sorry Macs. You can use RStudio Cloud for free for up to 15 hours per month (for plans and pricing see https://rstudio.cloud/plans/free ). See the “Guides” tab on the left for help (https://rstudio.cloud/learn/guide). RStudio Cloud has some excellent Primers that I’ll point you towards in one of the next modules; feel free to explore them yourself. See below for details. The 15 hr/month cap is pretty small, but RStudio Cloud is an excellent tool to remember in case you have problems installing R or need to test code that’s problematic on the desktop version of R. RStudio Cloud is super stable, but occasionally you can run into problems. This seems to be most common when you have a slow internet connection. Try the suggestions in the following Troubleshooting RStudio Cloud chapter. A cheatsheet for RStudio Cloud can be founder here: https://docs.google.com/presentation/d/1Lc0_hLgLUh0KSS5DIEZBUfE4KzeU8kH25nGY4w2kE1o/edit#slide=id.g6061a6c9a3_0_0 5.1 RStudio Cloud Installation Video This video will walk you through all the steps if you need more details 5.2 RStudio Cloud Primers Within RStudio Cloud there are a number of interactive primers that will help you get a feel for how R works. https://rstudio.cloud/learn/primers. “The Basics” https://rstudio.cloud/learn/primers/1 , “Work with Data” https://rstudio.cloud/learn/primers/2 and “Visualize Data” https://rstudio.cloud/learn/primers/3 cover basic R 101. There are several others, but these get more into programming with R and working with messy datasets, which may not be what everyone wants to focus on when they first get started. The “basics” is good for everyone to try. If you are going to use ggplot2 for making graphs then “Visualize Data” is your next stop. If you need to be managing raw data and manipulating it into new forms, “Work with data” shows you how to use the dplyr package. This video will walk you through working with these primers if you need more details "],["hello-r-a-first-encounter-with-data-visualization.html", "Chapter 6 Hello R! A first encounter with data visualization 6.1 Key Ideas 6.2 Data in R 6.3 Loading data that comes with R 6.4 Plotting simple datasets with plot() 6.5 Commands in R 6.6 The structure of commands in R 6.7 Arguements in R 6.8 Arguements and more arguments 6.9 Multiple arguments at the same time 6.10 R commands and line breaks 6.11 Code comments 6.12 A note on plotting 6.13 Now you try it", " Chapter 6 Hello R! A first encounter with data visualization 6.1 Key Ideas Commands: R uses simple typed commands to do everything. Data: loading data that comes with R using the data() command. Plotting: Making simple plots with the plot() command. 6.2 Data in R We’ll start our exploration of R with a classic dataset from ecology and statistics showing one of the most striking patterns in wildlife biology: (population cycles)[https://en.wikipedia.org/wiki/Population_cycle]. Populations are always changing, whether it is declines in the number bacteria in our gut after we take an antibiotic or increases in raptor species after highly toxic pesticides were banned in the mid-twentieth century. Figure 6.1: Growth of Eagle population in Pennsylvania, USA In stark contrast, a few unique animals populations show dramatic oscillations, with rapid increases soon followed by dramatic drops, as if the population were on a roller coaster. One such population are Canada lynx (Lynx canadensis) in Canada. Lynx are (unfortunately) prized for their soft fur. In years when there are many lynx, trappers kill many lynx; in years when there are few lynx, trappers kill few (however, the number of lynx killed by humans does not contribute to the cycle). Records from fur industry have been compiled by ecologists for over a century to investigate what drives changes in lynx numbers. The table below shows a snapshot of these data, starting from the earliest available records in 1821. Number of lynx trapped in Canada year lnyx.population 1821 269 1822 321 1823 585 1824 871 1825 1475 1826 2821 1827 3928 1828 5943 1829 4950 1830 2577 1831 523 1832 98 1833 184 1834 279 1835 409 You’ve probably plotted data like this by hand using graph paper, point by point by locating the x-y coordinates. When plotting data like this, time (in this case “year”) goes on the horizontal x-axis, and the changing variable (lynx.population) goes on the vertical y-axis. In a spreadsheet, you could highlight these columns and click on the “Make graph” icons to make the initial plot, then adjust things by clicking on parts of the plot you want to change. Spreadsheets are said to operate under the principle of “What You See Is What You Get”, or WYSIYGY. They use a fully mouse-drive Graphical User Interface (GUI) where everything is done by pointing and clicking. Every time you make a plot you do these steps. R is very different - you only see things when you want to see them and you do everything via typed commands. This is a large paradigm shift for most people, so we’ll start very very slow. 6.3 Loading data that comes with R The Canada lynx is not just famous with ecologists but also familiar to statisticians who have frequently used it to test statistical methods for studying time series - basically long-term datasets of the same thing. Because of this, these lynx data are embedded within R and easy to access: all you have to do is type data(lynx) into the console and press the “Enter” key. data(lynx) You might be wondering “Ok, now what?” because nothing apparently happened. What you’ve done, though is loaded the lynx data into R’s active memory, where it will wait for you next command. Loading your own data into programs such as R can be a pain, so I’ll use techniques such as use the data() command to make things as smooth as possible. I’ll also introduce other methods, such as loading small datasets using code and downloading them from the internet. I’ll also provide a thorough overview in the Appendices. 6.4 Plotting simple datasets with plot() Now in the console type plot(lynx) and press enter. You should see readout like what you see below … plot(lynx) … and this intriguing plot. The x-axis is time from the early 1800s to the early 1900s, and the y-axis is the number of lynx pelts. This pattern continues to today, and it causes have kept ecologists working hard for over 100 years. Moreover, statistical analyses of data such as these have similarly kept statisticians busy. This is a simplified example, but that’s the basics of working in R: Load data Use commands like plot tell R to do something with. For most of this book we’ll use data that’s been mostly pre-packaged for you to work with and loaded using the data() command. Real data analyses require more steps, and later in the book we’ll briefly cover them so you are familiar with them when you see them elsewhere; further details can also be found in the Appendix. 6.5 Commands in R The words “data” and “plot” in R represent commands; R associates specific code and therefore actions with these words To indicate commands in the text I’ll always write it like this: data(). The parentheses are very important in R; forget one of them, and things won’t work. After the word representing the command there is always a parenthesis (. Other things such as the name of a dataset go after the first parenthesis, and the command is completed with a matching parenthesis ). To emphasis that things using go within the parentheses I will often write commands like this data(...), where the ... in this case is the name of a dataset. In some cases you can issue a command, like data(), and R does something only behind the scenes. Often, though, we’ll elicit a reaction from R, either data will appear in the Console or a plot will be created. 6.6 The structure of commands in R Our use of the plot() command was pretty standard; there were two pieces to it: The command, plot() The data, lynx Data in R – and especially in computational biology – can take on many forms, which we’ll cover as needed as throughout the book. All data is presented in R by an object stored behind the scenes in R’s memory. The fact that data in R is usually resting out of view until we do something explicitly with it can take some getting used to, since usually we work with data printed out on a page or displayed in a spreadsheet. Commands in R almost always include an object within them. Next we’ll consider something else that go with commands : arguments. 6.7 Arguements in R A common mathematical operation when doing data analysis is taking the log of something. (For now we won’t worry about what the log is or why we use it’ we’ll come back to this little bit of math frequently though). We can tell R to plot the log of our lynx data by adding the argument log = \"y\" to the plot(...) command. This alters the graph a bit which, for some particular data analysis purposes, will come in handy (more on that later). plot(lynx, log = &quot;y&quot;) In the code above log is the argument and \"y\" is the value assigned to the argument. Arguments always have an equals sign with them, so I’ll emphasize this by typically writing them as argument.name = .... One tricky thing about arguments is that they can take on letters, words, or numbers, and sometimes there need to be quotation marks like log = \"y\", but not always. Since arguments are fairly tricky, they are a common source of errors, such as forgetting =, or putting the value of the argument in the wrong format. 6.8 Arguements and more arguments We now have three things going on A command, plot() A data object, lynx An argument, log = \"y\" Most functions in R have multiple arguments that can be invoked Try the following code plot(lynx, col = 3). That is the plot() function with the argument col = 3 added. What do you think col = 2 means? Try different values like 4, 5, and 6. plot(lynx, col = 2) Now try this: plot(lynx, type = \"p\") Note that there are quotation marks around the p. plot(lynx, type = &quot;p&quot;) Now instead of “p” use “b”, which stands for “both”. What do you think the “both” is referring to? plot(lynx, type = &quot;b&quot;) ## TODO: add followup exercises ### R, biology ## TODO Add as optional? cover elsewhere plot(log(lynx)) 6.9 Multiple arguments at the same time Functions can not only have multiple arguments, but they can take on multiple arguments at the same time. Let’s feed two arguments to plot(), col = ... and a new one, type = .... plot(lynx, col = 4, type = &quot;b&quot;) Examine the series of plots below; what do you think type=... is referring to? 6.10 R commands and line breaks A cool thing about R is that it doesn’t care about line breaks within a command, so I can do this if I want: plot(lynx, col = 4, type = &quot;b&quot;) Or if for some reason this plot(lynx, col = 4, type = &quot;b&quot;) Or even this plot(lynx, col = 4, type = &quot;b&quot;) 6.11 Code comments One thing that putting thing on multiple lines allows you do to is add comments to your code if you place a hashtag (aka pound symbol) in front of it. plot(lynx, # data object col = 4, # color argument type = &quot;b&quot;) # type of graph argument 6.12 A note on plotting One of the great things about R is that it can make really nice plots. You’ll soon see that there are many ways to do the same basic thing in R, and this includes making plot. Data visualization is a key aspect of modern science, so its important to build up your skills, including knowing about the different ways plots are made in R. Don’t worry though - we’ll build all of this up step by step. 6.13 Now you try it 6.13.1 Easy tasks Fix each line of code below so the work plot lynx plot(lynx Examine the plots below. What does pch = ... do to the plot? Examine the plots below. What does lwd = ... do to the plot? Fix each argument below so the code works. plot(lynx, col 1) plot(lynx, col = &quot;1&quot;) plot(lynx, type b) plot(lynx, type = b) plot(lynx, type &quot;b&quot;) plot(lynx type &quot;b&quot;) plot(lynx, type = &quot;b) plot(lynx, col 1, type = &quot;b) plot(lynx, col = &quot;1&quot;, type = b) plot(lynx, pch = 1, type b) plot(lynx, pch 1 type = b) plot(lynx, lwd = &quot;2&quot; type &quot;b&quot;) plot(lynx pch = 2, type &quot;b&quot;) plot(lynx, lwd = 3 type = &quot;b) Split the following code between multiple lines and add a comment between each of them to indicate what the argument does. plot(lynx, type = &quot;b&quot;, pch = 2,) 6.13.2 Intermediate tasks Here’s a challenge: there is another dataset that comes with R called sunspot.year There was once a hypothesized link between the Canada lynx and sunspots that we’ll explore later; right now we’ll just check it out. See if you can do the following things on your own in the R console. Make a simple plot Using the data() command, load sunspot.year data into R’s active memory Plot the data. Your plot should look like this: Modify your plot Use the col = argument to make the color of the line different than black. Use the type = argument to make the plot show points connected by a line. Your plot should look like this: Plot on the log scale Plot the sunspot data on the log scale. Note: you will get a warnig in red text - you can ignore this. ## Warning in xy.coords(x, NULL, log = log, setLab = FALSE): 3 y values &lt;= 0 ## omitted from logarithmic plot "],["troubleshooting-problems-w-rstudio-cloud.html", "Chapter 7 Troubleshooting problems w/ RStudio Cloud", " Chapter 7 Troubleshooting problems w/ RStudio Cloud RStudio Cloud is almost always a painless program to use. Occasionally a few minor hiccups will occurs. The following tips should help you clean up any problems. Note that the best browsers for RStudio Cloud are Chrome and Firefox; if you’re using Safari I recommend switching. When you are having a trouble with RStudio Cloud do the following things to see if they help: Refresh the browser Check that no pop-up blocker is active; disable for RStudio cloud Click out of project and reload Turn off your wifi and turn it back on Close browser tab and reload Close browser and Restart it Explicitly log out of your Cloud account and log back in Try a different browser (eg, use Firefox if you’ve been using Chrome) Update your browser (download it again, install updates etc). "],["swirl.html", "Chapter 8 swirl 8.1 swirl quickstart: 8.2 Installing Packages in RStudio &amp; RStudio Cloud 8.3 Getting to know swirl video 8.4 A worked example of swirl “Sequences of Numbers”", " Chapter 8 swirl swirl is a system for running tutorials within the R console. R basically asks you questions and you type the answer. Information about downloading and using swirl can be found here: https://swirlstats.com/students.html 8.1 swirl quickstart: In the R console run these commands: To set everything up: install.packages(&quot;swirl&quot;) library(&quot;swirl&quot;) swirl::install_course(&quot;R Programming&quot;) swirl::install_course(&quot;The R Programming Environment&quot;) To get started type: swirl() Swirl will guide you through the reset. Choose one of the R Programming tutorials. A cheatsheet to swirl commands and other info can be found here: https://docs.google.com/presentation/d/12cNq9VYEUFzzzQkNmRF2PgllW05-tVqoEux26jfygWw/edit?usp=sharing 8.2 Installing Packages in RStudio &amp; RStudio Cloud R has many packages (aka “libraries”) that extend its functionality. Installing these can be a bit confusing. Watch this video for a brief overview. If you need more information there are other videos on YouTube. Note: I go through this in RStudio Cloud, but it works the same way in regular RStudio. https://youtu.be/UaS1OVb89S8 8.3 Getting to know swirl video In this video I explain exactly what’s going on each step of the way as I work through a swirl tutorial (“Basic building blocks”). If what was happening during the swirl tutorial itself made sense then you probably don’t need to watch the video. If you were confused, watch this to see if it helps, pausing as needed to work on the tutorial. The key vocabulary, concepts and functions covered in this tutorial are: * programming language * variable * +, -, /, and ^ * sqrt() * abs() * assignment operator * &lt;- * help files * vector * c() function (“concatenate”, “combine”) * element wise operation (“element-by-element”) * recycling * vectorized operations (not discussed in those terms) * up arrow to view command history * tab completion (“auto-completion”) 8.4 A worked example of swirl “Sequences of Numbers” In this video I explain exactly what’s going on each step of the way as I work through a swirl tutorial. If what was happening during the swirl tutorial itself made sense then you probably don’t need to watch the video. If you were confused, watch this to see if it helps, pausing as needed to work on the tutorial. https://youtu.be/I6aoCVoKTm8 "],["a-guide-to-current-swirl-tutorials.html", "Chapter 9 A guide to current swirl tutorials 9.1 Regression Models: The basics of regression modeling in R (Team swirl) 9.2 Statistical Inference: The basics of statistical inference in R (Team swirl) 9.3 Exploratory Data Analysis: The basics of exploring data in R (Team swirl) 9.4 Getting and Cleaning Data (Team swirl) 9.5 Advanced R Programming (Roger Peng) 9.6 The R Programming Environment (Roger Peng) 9.7 Regular Expressions (Jon Calder) 9.8 A (very) short introduction to R (Claudia Brauer) 9.9 R Programming: The basics of programming in R (team swirl)", " Chapter 9 A guide to current swirl tutorials Below are the names of the swirl tutorials which are most relevant to new R users, how to download them and the names of the units within each tutorial 9.1 Regression Models: The basics of regression modeling in R (Team swirl) Installation: swirl::install_course(&quot;Regression Models&quot;) Units: Introduction Residuals Least Squares Estimation Residual Variation Introduction to Multivariable Regression MultiVar Examples MultiVar Examples2 MultiVar Examples3 Residuals Diagnostics and Variation Variance Inflation Factors Overfitting and Underfitting Binary Outcomes Count Outcomes 9.2 Statistical Inference: The basics of statistical inference in R (Team swirl) Installation: swirl::install_course(&quot;Statistical Inference&quot;) Units: Introduction Probability1 Probability2 ConditionalProbability Expectations Variance CommonDistros Asymptotics T Confidence Intervals Hypothesis Testing P Values Power Multiple Testing Resampling 9.3 Exploratory Data Analysis: The basics of exploring data in R (Team swirl) Installation swirl::install_course(&quot;Exploratory Data Analysis&quot;) Principles of Analytic Graphs Exploratory Graphs Graphics Devices in R Plotting Systems Base Plotting System Lattice Plotting System Working with Colors GGPlot2 Part1 GGPlot2 Part2 GGPlot2 Extras Hierarchical Clustering K Means Clustering Dimension Reduction Clustering Example CaseStudy 9.4 Getting and Cleaning Data (Team swirl) Installation swirl::install_course(&quot;Getting and Cleaning Data&quot;) Units 1: Manipulating Data with dplyr 1: Grouping and Chaining with dplyr 1: Tidying Data with tidyr 1: Dates and Times with lubridate 9.5 Advanced R Programming (Roger Peng) swirl::install_course(&quot;Advanced R Programming&quot;) Setting Up Swirl Functions Functional Programming with purrr0 9.6 The R Programming Environment (Roger Peng) swirl::install_course(&quot;The R Programming Environment&quot;) Setting Up Swirl Basic Building Blocks Sequences of Numbers Vectors Missing Values Subsetting Vectors Matrices and Data Frames Logic Workspace and Files Reading Tabular Data Looking at Data Data Manipulation Text Manipulation Functions Regular Expressions The stringr Package 9.7 Regular Expressions (Jon Calder) Installation: swirl::install_course(&quot;Regular Expressions&quot;) Units Introduction Regex in base R Anchors Character Classes Groups and Ranges Quantifiers Applied Examples 9.8 A (very) short introduction to R (Claudia Brauer) swirl::install_course(&quot;A_(very)_short_introduction_to_R&quot;) The author notes: &gt;“Thiscourse is based on a non-interactive tutorial with the same name, which can be downloaded from www.github.com/ClaudiaBrauer/A-very-short-introduction-to-R. The contents are the same (with a few exceptions), so you can open the pdf version alongside to look up how to do something you learned before or browse through the references on the last two pages.” This tutorial has 3 modules. The first is introductory. The others get into more details tasks, such as sourceing .R file scripts. 9.9 R Programming: The basics of programming in R (team swirl) Basic Building Blocks Workspace and Files Sequences of Numbers Vectors Missing Values Subsetting Vectors Matrices and Data Frames Logic Functions lapply and sapply vapply and tapply Looking at Data Simulation Dates and Times Base Graphics The key vocabulary, concepts and functions covered in this tutorial are: programming language variable +, -, /, and ^ sqrt() abs() assignment operator &lt;- help files vector c() function (“concatenate”, “combine”) element wise operation (“element-by-element”) recycling vectorized operations (not discussed in those terms) up arrow to view command history tab completion (“auto-completion”) "],["r-desktop.html", "Chapter 10 R Desktop 10.1 Important notes 10.2 Videos", " Chapter 10 R Desktop R is pretty easy to download and install. If you need further help see this video: https://youtu.be/C5iST9E-U_s (PC only), or this one by the team at RStudio: https://vimeo.com/203516510 Windows: https://cran.r-project.org/bin/windows/base/ Mac: https://cran.r-project.org/bin/macosx/. PC Users: Make sure you download the 64 bit version. Mac users: If you are running an older Mac OS you may have to look around to pick the appropriate version - or better yet, try to update your OS. If you are a student you may be able to get the update for free through your school 10.1 Important notes R is frequently updated!: If you already have R downloaded, you should update it by downloading and reinstalling it again. People don’t actually use the base R program! After you install R, an icon will show up on your computer in the usual places: . There’s rarely any reason to click on this - instead, you’ll use another program called RStudio - see the next step! For a bit more info on the difference between R and RStudio see https://community.rstudio.com/t/differentiating-r-from-rstudio/8009?u=mara 10.2 Videos This video shows how to install R on a PC https://youtu.be/C5iST9E-U_s "],["rstudio-desktop.html", "Chapter 11 RStudio Desktop", " Chapter 11 RStudio Desktop Figure 11.1: The RStudio logo Very few people use the R desktop program directly; rather they use an Interactive Development Environment (IDE) which talks to the underling R program and provides important features not in the basic R download. RStudio is probably the most popular and is available free at: https://bit.ly/RSdesktop . There are Windows and Mac versions - make sure you get the correct one. If you need more help see this video from RStudio: https://vimeo.com/203516968 Note that the R icon is a dark blue “R”. In contrast, the RStudio icon is a light blue circle with a white “R” . (#fig:rstudio.logo1)The RStudio logo Here’s another walkthrough of the process of downloading RStudio: https://youtu.be/M8N5QdkQRW4 "],["onedrivebad.html", "Chapter 12 A note before you start - make sure you’re not in OneDrive or another network folder!", " Chapter 12 A note before you start - make sure you’re not in OneDrive or another network folder! Depending on your computer, your operating system, and you’re recent download history, things will download into different places. Some machines may download programs like R to some kind of network or cloud drive, just as OneDrive. Make sure you are downloading to your actual hard drive such as the “Downloads” folder. The same goes for when you are installing software. If prompted, make sure you’re not in OneDrive or another network drive, or check where the download is going. For example, on a Mac I can check where something is downloaded to by clicking on the little down arrow next to the downloaded file and then “Show in Finder.” "],["the-layout-of-rstudio.html", "Chapter 13 The layout of RStudio 13.1 RStudio (Desktop or Cloud) 13.2 R emulators 13.3 Other ways 13.4 RStudio at a glance", " Chapter 13 The layout of RStudio To move forward with this book you need to get access to R. There are several ways to do this, and if you are participating in a class your instructor may have a favored way to do it. 13.1 RStudio (Desktop or Cloud) There are two primary ways to use R relevant to this book: Create an account at RStudio Cloud. This is the easiest way to get started; you get 15 hours per month free which is enough for you to get your bearings. Complete instructions for doing this are available in the appendices. Note that RStudio Cloud and RStudio are essentially identical and so all instructions related to RStudio are relevant to RStudio cloud. Download R AND RStudio desktop. Key here is that you need TWO pieces of software, R and RStudio. Complete instructions are in the appendices. These two methods are essentially equivalent. To jump in and get started I recommend RStudio cloud. See the appendices for step by step instructions. 13.2 R emulators There are also two other ways of using R which we’ll occasionally use. I mention them here briefly. They essentially emulate the R experience but eliminate the hairy details. Shiny Apps: These are independent mini-programs that allow you to explore or carryout some aspect of R functionality without doing any coding. They typically live on the internet, but can also be brought up from RStudio desktop. An example of a simple Shiny App on the internet is here: https://shiny.rstudio.com/gallery/faithful.html. learnr tutorials: These are interactive tutorials where you do basic coding in your web browser. Here’s an example: https://learnr-examples.shinyapps.io/ex-data-filter/ 13.3 Other ways Two other ways you may encounter R Use a Jupyter notebook: Jupyter notebooks are an advanced R emulator. They are really cool, allowing you to essentially combine text (like a tutorial) with code that can be run within a web browser. Use regular old R: When you download R an icon will appear on your desktop. You can access old-school R that way, but almost no one ever does. For a bit more information about this see the appendix. 13.4 RStudio at a glance Now we’ll get started with RStudio. We’ll get to know what it looks like and configure it a bit for out needs. If you are using RStudio desktop the RStudio logo looks like this: (#fig:rstudio.logo2)The RStudio logo Whether on the Cloud or Desktop, when you open up you’ll be greeted by a fairly busy array of menus and things. Don’t panic! A typical fresh starting point in RStudio/RStudio Cloud is shown in Figure 2. (#fig:rstudio.open)RStudio when first opened. When referring to RStudio (and equivalently RSTudio Cloud - this is the last time I’ll mention this so hopefully get get the point), there are two terms that need to be understood. As shown in Figure 3, there is 1)the console section of RStudio and 2) the script editor or source viewer. (#fig:rstudio.console)RStudio’s console and script editor. (A “cheat sheet” called the “RStudio IDE Cheat Sheet” details all of RStudio’s many features and is available at https://www.rstudio.com/resources/cheatsheets/ . It very thorough, though a bit dense. I don’t recommend it for beginners but you should remember that it exists.) 13.4.1 The console versus the script editor You can type and enter text into both the console and the script editor (also called the source viewer. The console, however, responds actively like a calculator, while the script editor works more like a text editor. Information can be passes unidirectionally from the script editor to the console, but not the other way. 13.4.1.1 The R console The console in RStudio gives you interactive programming environment that is very similar to a scientific calculator. If you click your mouse inside the console and type 1 + 1 then press enter you will see the following type of output 1 + 1 ## [1] 2 Note that right in front of where you typed 1+1 there is a &gt; symbol. This is always in the R console and never needs to be typed. You may occasionally see it printed in books or on websites, but it doesn’t ever need to be typed. One thing to note about R is that it’s not particular about spacing. All of the following things will yield the same results 1+1 1 + 1 1 + 1 1 + 1 Got it? Awesome! Now we’re ready for some real data analysis. "],["problems-getting-r-and-rstudio-up-and-running.html", "Chapter 14 Problems getting R and RStudio up and running 14.1 Solution 1: Use RStudio Cloud (short-term solution) 14.2 Solution 2: Use the base R program (medium-term solution) 14.3 Solution 3: Update an old version of R 14.4 Solution 3: Address common problems 14.5 Solution 4: See the full Troubleshooting Guide", " Chapter 14 Problems getting R and RStudio up and running 90% of the time or more people can get R and RStudio up and running. However, there can be some weird issues. Below are some ideas for troubleshooting. I encourage you to read through all of them to get oriented to all the possible solutions before you select one. Solution 0: Do you have RStudio AND the base R program downloaded? Do you have the current version (R vs. Mac) of BOTH R and RStudio downloaded?). Sorry, need to ask. You get R from the CRAN website (PC download: bit.ly/CRANwindows; Mac download: bit.ly/CRANmac) and RStudio from the RStudio website. 14.1 Solution 1: Use RStudio Cloud (short-term solution) This is a short-term solution, since free accounts only provide 15 hours per month. This will let you dabble and get some things done while you troubleshoot things. 14.2 Solution 2: Use the base R program (medium-term solution) If RStudio isn’t working the basic R program may still be ok. You can probably fix this by re-downloading the R program - see the next solution for details. But, if you just want to get some coding done, you can use the base R program. Note that the R icon is a dark blue “R” , while the RStudio Icon is a light blue circle with a white “R” . 14.3 Solution 3: Update an old version of R Sometimes RStudio doesn’t play nice with older versions of R. If you used R before and just downloaded RStudio for the first time, download R again, then see if RStudio works. PC download: bit.ly/CRANwindows; Mac download: bit.ly/CRANmac. 14.4 Solution 3: Address common problems There are some common problems when downloading R and RStudio or trying to run them for the first time. If you are a student your school’s computer services or IT deChapterment can probably help you with this. Are your security settings preventing download? Dial back them back / turn them off temporarily. Do you need to install updates? New versions of R and RStudio play the nicest when your computer is up to date. Do you need to update your OS? If your operating system (OS) is very old it may be possible to get R running (see below), but it’s easiest if you update the OS. If you are a student your may be able to get this software for free. Did you download R and/or RStudio to a network drive rather than your hard drive? Executable software usually needs to be installed on your computers hard drive, not a shared network drive or location in the cloud such as OneDrive. 14.5 Solution 4: See the full Troubleshooting Guide An in-depth troubleshooting guide is included in this book. "],["troubleshooting-r-error-messages.html", "Chapter 15 Troubleshooting R error messages 15.1 Acting weird but not telling you something is wrong 15.2 Warning messages 15.3 Error messages 15.4 Crashes", " Chapter 15 Troubleshooting R error messages Once R is running, it tells you something is not working correctly 4 ways By acting weird but not telling you something is wrong Warning messages Error messages Crashing Note that there is a BIG difference between a “Warning” (usually can be ignored) and an “Error”, which is a problem that needs to be addressed. Both occur in angry looking red text, but their consequences are VERY different. 15.1 Acting weird but not telling you something is wrong Fairly common. With practice you’ll figure this out. Some of the info below will help you with this. ( Specific information to be added later) 15.2 Warning messages Again, warnings are very different than errors. R loves to give you unnecessary warnings in what appears to be angry red-text. This is usually nothing to worry about. See here for more info: https://bit.ly/Rwarningsvid 15.3 Error messages These can be problematic, though often R won’t crash. Some of the info below will help you with this. ( Specific information to be added later) 15.4 Crashes R and RStudio are very stable. Often updating R and RStudio will fix this, or some other major underlying package. Some of the info below will help you with this. ( Specific information to be added later) See this thread for ideas for troubleshooting R messages and other R shenanigans. https://twitter.com/lobrowR/status/1179822382782935040?s=20 For advanced situations, you may want to see if code works in an older version of R Changing version of R run by RStudio https://support.rstudio.com/hc/en-us/articles/200486138-Changing-R-versions-for-RStudio-desktop R switch for Mac https://mac.r-project.org/ Issues with C/Python libraries “Symbol not found“ https://github.com/rstudio/tensorflow/issues/69 "],["note-on-updating-r-read-if-youve-used-r-before.html", "Chapter 16 Note on updating R (read if you’ve used R before!)", " Chapter 16 Note on updating R (read if you’ve used R before!) Important note: R is frequently updated! If you already have R downloaded for a previous class, you should update it by downloading and reinstalling it again. R went through a major update this past year and you need to make sure you have the newest version. (If you just downloaded R for a class, you’re good!) "],["advanced-troubleshooting-r-rstudio-installation.html", "Chapter 17 Advanced Troubleshooting R &amp; RStudio Installation", " Chapter 17 Advanced Troubleshooting R &amp; RStudio Installation For persistent issues you may need to try an older version of R. For Macs, download RSwitch from https://mac.r-project.org and an older version of R, https://cran.r-project.org/bin/macosx/R-3.3.3.pkg (Mac OS X 10.9 (Mavericks) and higher) or https://cran.r-project.org/bin/macosx/R-3.2.1-snowleopard.pkg (Mac OS X 10.6 (Snow Leopard) - 10.8 (Mountain Lion)). Unfortunately if you have to use older versions of R some new packages might not work; yeah… For more advanced troubleshooting see https://support.rstudio.com/hc/en-us/articles/200488508-RStudio-Desktop-Will-Not-Start "],["video-angry-red-text-in-r-dont-panic.html", "Chapter 18 Video - Angry red text in R (don’t panic!)", " Chapter 18 Video - Angry red text in R (don’t panic!) R often shows you things in red text and issues “warnings.” This video explains what this means and why not to worry. https://youtu.be/1G6ez7qe9uI "],["troubleshooting-r-rstudio-installation.html", "Chapter 19 Troubleshooting R &amp; RStudio Installation", " Chapter 19 Troubleshooting R &amp; RStudio Installation Trouble getting R going? Considering each of these questions will help you troubleshoot things. 19.0.0.1 Question 1: Were you able to download R? Are there any security-related pop ups from your computer when you are downloading or installing? See if you can turn these off on your computer, then try again. In rare cases there may be an administrative firewall preventing download or installation; in this case you need to contact your IT department 19.0.0.2 Question 1.5: Did R download to your downloads folder or another folder on your computer? Check to make sure that your computer didn’t default to a network drive just as OneDrive. You may be able to install R into this drive, but it will cause problems downstream. Either re-download or move the installation file onto your hard drive (e.g, the downloads folder). Also make sure that when you install the program, it’s installing to your hard drive. 19.0.0.3 Question 2: Does the base R desktop program work? Find the blue R icon on your desktop or the program menu. If you have trouble use the search function (e.g. Spotlight on a Mac). Sometimes R itself works fine, but there’s an issue in RStudio talking to R. 19.0.0.4 Question 3: Have you used R previously and didn’t update it? RStudio doesn’t always get along with old version of R. If you used R previously (even if it was just a year or 6 months ago) download and install it again. 19.0.0.5 Question 4: Did you update R but not RStudio? Make sure you have the nest versions of both programs. 19.0.0.6 Question 5: Did you download both R and RStudio? Make sure you downloaded R, and that the download worked. 19.0.0.7 Question 6: Did you download the correct versions of R/RStudio? There are Mac and PC versions of both programs. 19.0.0.8 Question 7: PC Users - did you download the 64 bit version? R comes in two flavors, 32 bit and 64 bit. Usually you want 64 bit. 19.0.0.9 Question 8: Mac Users - did you download the correct version for your OS? Scroll down the list of Mac versions to find your correct OS. If you’re not sure what you’re currently running, type “OS” into the Spotlight search bar. 19.0.0.10 Question 9: Are you getting the error from RStudio “computer’s system information to see whether you need an x86(32-bit) or x64 (64-bit) version of the program, and then contact the software publisher” See Question 7. For more information see the following threads community.rstudio.com/t/the-version-of-this-file-is-not-compatible-with-the-version-of-windows-youre-running/28165 community.rstudio.com/t/unable-to-select-32-bit-r-version-in-rstudio-v1-2-1047-1-preview/16404 19.0.0.11 Question 10: Are you getting any weird pop ups, error messages, or cryptic info from your computer, R, or Rtudio? Copy and paste the content of the message into a search engine and see if anything comes up. 19.0.0.12 Question 11: Are things STILL not working? Sorry, this is a rarity - R is usually pretty easy to install. First, consider using RStudio Cloud or just base R (if it works) while you sort things out, calm down, etc. Second, do you know anyone who can help? Teaching Assistant, instructor, friend? Third, consider posting a question to the RStudio communtiy form: https://community.rstudio.com/ . When asking for help - especially online - be sure to include the following info: How old is your computer? What type of computer (Mac, regular PC laptop, Surface tablet, etc) The version of your operating system (OS). On Macs, type “OS” into the SpotLight search bar and it will tell you the OS name and version. Screen grabs or the full text of any error messages "],["rtools.html", "Chapter 20 Rtools", " Chapter 20 Rtools Rtools can occasionally cause installation problems. Rtools is an external program to R and is not a library, though error messages don’t indicate this. For background on Rtools see The why and the how of installing Rtools https://nugaemeae.wordpress.com/2012/08/30/the-why-and-the-how-of-installing-rtools/ "],["troubleshooting-basic-problems.html", "Chapter 21 Troubleshooting basic problems 21.1 Bad arguments 21.2 Hung code 21.3 Missing quotes", " Chapter 21 Troubleshooting basic problems Forgetting the second closing parenthesis is a major cause of mistakes when learning R. If something doesn’t work, press the escape key in the upper left-hand corner of your keyboards (labeled “esc” or “ESC”) a couple of times, then first check to make sure you have the sneaky second ). This is important so I’ll repeat it: Forgetting the second parenthesis is a major cause of mistakes when learning R. If something doesn’t work, press the escape key a couple of times, then first check to make sure you have both parantheses. 21.1 Bad arguments None of these work plot(lynx, log = y) plot(lynx, log = &quot;y) plot(lynx, log y) 21.2 Hung code When we forget a closing parenthesis in R we get hung code. We think we told R to do something, like make a plot, but nothing happens. 21.3 Missing quotes "],["downloading-r-packages-and-their-data.html", "Chapter 22 Downloading R packages (and their data) 22.1 Loading data from R packages 22.2 OPTIONAL: What functions come with base R? 22.3 Load data from an external R package 22.4 OPTIONAL: Seeing all of your installed packages 22.5 Downloading packages using RStudio 22.6 Your turn", " Chapter 22 Downloading R packages (and their data) In the previous chapter we used some data the comes with R. In this lesson we’ll start expanding out from the Base R distribution and exploring the ways that external packages extend R. 22.1 Loading data from R packages NEW text: When you install R you get *Base R**, which is the core set of functions, functionality, and some data sets. Base R is surrounded by a universe of extensions built by statistician, programmers, academics and businesses that use R for analyses. A lot of R’s functionality is found in these packages, including data sets, special plotting functions, and statistical tools for the analysis of complex data. These have to be downloaded from the internet and installed. Most packages contain data in order to demonstrate what they do. Most R packages you’ll use are stored on the CRAN website where you download R (https://cran.r-project.org/). R and RStudio have functions and tools for downloading and managing packages that we’ll briefly introduce in this exercise. Another major platform for packages is called Bioconductor; we’ll cover downloading packages from there later. Finally, many packages are hosted on a site called GitHub. This book relies heavily on an R package I’ve written and hosted on GitHub called combio4all (https://brouwern.github.io/combio4all/) that contains the datasets used throughout the book, as well as some helpful R functions I’ve written. Many packages on CRAN also occur on GitHub, especially if programmers are actively developing, updating, and managing the package. We’ll cover downloading packages from GitHub later. 22.1.1 Functions &amp; Arguements install.packages() Argument: dependencies = TRUE library() 22.2 OPTIONAL: What functions come with base R? The following section is OPTIONAL If for some reason you want to see all the functions that come with the distribution base R, type this into the console and press enter. (ls stands for “list” and is a function we’ll use more later). # this code chunk is OPTIONAL ls(&quot;package:base&quot;) As R has been developed there has also built up a cannon of tried and true packages that are downloaded automatically when you download R. If you want to see all of the packages that come with base R, do this. library() is a function you will use a lot. # this code chunk is OPTIONAL .libPaths(&quot;&quot;) library() One package that is part of this cannon is MASS, which stands for Modern Applied Statistics in S. “S” is the precursor to R, and MASS is the package that accompanies the book of the same name, which is one of the original books on S/R. (https://www.springer.com/us/book/9780387954578) End OPTIONAL section 22.3 Load data from an external R package Many packages have to be explicitly downloaded and installed in order to use their functions and datasets. Note that this is a two-step process: Download package from internet with install.packages(...) Explicitly tell R to load it with library(...) 22.3.1 Step 1: Downloading packages install.packages(...) There are a number of ways to install packages. One of the easiest is to use the function install.packages(). Note that it might be better to call this “download.packages” since after you download it, you still have to load it! (Lots of confusion has resulted from calling this function “install.packages”). We’ll download a package with lots of interesting biology data called Stat2Data. Note that in the call to install.packages(...), the name of the package is in quotes. install.packages(&quot;Stat2Data&quot;) Often when you download a package you’ll see a fair bit of red text. Usually there’s nothing of interest here, but sometimes you need to read over it for hints about why something didn’t work. For example, when I downloaded this package I got this cryptic message in bright red text: trying URL 'https://cran.rstudio.com/bin/macosx/contrib/4.0/Stat2Data_2.0.0.tgz' Content type 'application/x-gzip' length 1177728 bytes (1.1 MB) ================================================== downloaded 1.1 MB Followed by this in less insistent black: The downloaded binary packages are in /var/folders/q8/gwjfr69n05vf4h15l6hdl4d8x1zk5v/T//RtmpeRHx2y/downloaded_packages This is all perfectly normal, so don’t worry. 22.3.1.1 Protip: don’t re-download packages all the time You can think of R and RStudio like a computer operating systems, and packages like software you chose to download. R, RStudio and packages will need to be updated at times - indeed, the first step in diagnosing many problems with R is to update things. But updates probably only need to be done every six months or so at the most; I generally wait until things stop working. Anytime a lesson introduces a new package I’ll include code to do the download. You only need to do this once unless you start encountering a problems. A way to make this happen is to comment out the code by putting a hashtag in front of it like this # install.packages(&quot;Stat2Data&quot;) This preserves the code but tells R “don’t run this line.” 22.3.2 Step 2: Explicitly loading a package The install.packages() function just downloads the package software to R; now you need to tell R explicitly “I want to work with the package”. This is done using the library() function. (Its called library because another name for packages is libraries. ). library(Stat2Data) As frequently is the case, R doesn’t look like its doing much, but you’ve actually just installed a bunch of cool datasets. In contrast to running install.packages(), library() need to be run every time you use the code. More specifically, every time you re-start R. What happens is when you shut down R, all the packages you loaded using library() are taken out of memory. Next time you use R you need to re-load them using libary(). 22.4 OPTIONAL: Seeing all of your installed packages The following section is OPTIONAL If for some reason you want to see everything you’ve downloaded, do this. # This code is optional installed.packages() End OPTIONAL section 22.5 Downloading packages using RStudio RStudio has a point-and-click interface to download packages. In the pane of the RStudio GUI that says “Files, Plots, Packages, Help, Viewer” click on “Packages”. Below “Packages” it will then say “Install, Update, ..,” Click on “Install.” (There might be a lag during this process as RStudio gets info about your packages). In the pop up widow there will be a middle field “Packages” where you can type the name of the package you need. There’s an auto-complete feature to help you in case you forget the name. Then click “install.” Note that in the bottom right corner of the pop up is a checked box next to “Install dependencies.” Leave that checked; more on that later. This is a useful function, but I don’t do this very often because I include any download information in my scripts. 22.6 Your turn Fix this code install.packages(MASS) install.packages(&quot;car) install.packages ggplot2 install.packages(cowplot install.packagesggpubr The package carData contains a time series dataset called USpop. Fix the following code to download and plot these data. install.packages(&quot;carData&quot;) plot(USPop) The package boot contains a dataset called ducks on the behavior of crosses between two species of ducks: Mallards and Pintails Fix the following code to download and plot these data. install.packages(&quot;boot&quot;) library(boot) plot(ducks) "],["intalling-r-packages.html", "Chapter 23 Intalling R packages", " Chapter 23 Intalling R packages An video showing the process of loading packages: https://youtu.be/cY4dxsh3lXI "],["libaries-versus-packages-in-in-r.html", "Chapter 24 “Libaries” versus “packages” in in R", " Chapter 24 “Libaries” versus “packages” in in R install.packages() downloads the package to your computer from CRAN, the official R website library() loads things that have been downloaded into your active R sessions. You typically have to run library() on different packages every time you run R. devtools is an R package with provides tools for managing and downloading R packages; it contains the function install_github() install_github() downloads unofficial packages from github You only typically run install.packages() or install_github() every once in a while, first when you start out using R and then later when you need updates. We’ll hopefully only ever have to do install.packages(“devtools”) once. We’ll have to do install.packages(“dayoff”) most weeks b/c I’m always updating. Example So, to install a package I’m developing on GitHub called dayoff, you’ll have to load devtools using library(devtools), then download dayoff with install_github(…), then load dayoff into your current R session with library(dayoff). If you restart R sometime during class, you’ll just have to do library(dayoff) to get rolling again. Normally I’ll include most of this code in a script or as a reminder, but its good to be familiar with it. "],["ways-of-getting-data-into-r.html", "Chapter 25 Ways of getting data into R", " Chapter 25 Ways of getting data into R Getting data into R is often one of the most frustrating steps for beginners because R, like most data analysis tools that aren’t spreadsheets, it seemingly very picky about how it wants to receive data. Luckily there’s a method behind the madness, and also some handy tools in RStudio to help with this. Most data starts off as a spreadsheet or some other kind of table before it enters R. Loading spreadsheet data into R will be our end goal, but as a run up will step through several easier tasks that will highlight the core principles of getting data into R, in particular loading additional software into R (called packages) and loading the data in those packages into R. We’ll also load data directly from the internet into R. The chapters in this section are cover the following: Loading R packages to get new software into R Loading and looking at data from R packages Loading packages from the software repository GitHub Loading data from the internet Loading spreadsheets as .csv files Loading Excel spreadsheets "],["loading-excel-spreadsheets-into-rstudio.html", "Chapter 26 Loading Excel spreadsheets into RStudio 26.1 Preparing a file for loading into R 26.2 Reload data", " Chapter 26 Loading Excel spreadsheets into RStudio Nathan Brouwer, Phd brouwern at gmail.com https://github.com/brouwern Twitter: lobrowR THIS CHAPTER HAS NOT BEEN WRITTEN re-save as .csv and load load directly In this walk through we first re-save this data in an R-compatible format, a “csv” file, called “Lab1_data_PA_eagles.csv”. 26.0.1 Prepping data in Excel 26.0.1.1 Save data to your R working directory (WD) Find the file https://github.com/brouwern/wildlifeR/tree/master/inst/extdata Save the file “Lab1_data_PA_eagles.xlsx” to your computers desktop. Today we will be using this as the “working directory” 26.0.1.2 Re-Save The Excel file as a “csv” file In Excel, follow these steps “File” “Save As” “Browse” Select the working directory (your desktop) Select “Save as type” Select “CSV (Comma delimited)” Click “Save” The data is now in a format that can be loaded into R. 26.1 Preparing a file for loading into R Things work best when your Excel file is “clean” &amp; only has exactly what you want in it. Any extra, accidental typing can cause problems or make things confusing. A good practice is to always highlight cells to the right of and below your data, right click &amp; select “Delete”. This will remove any accidental typing that occurred. Do this to the cells below your data also. 26.2 Reload data Reload data; be sure to include the “csv” at the end. Use this code “eaglesPA &lt;- read.csv(file =”eaglesPA.xlsx”)“. NOTE: I changed the name of the file to include”_w_2_states” so that I wouldn’t overwrite the original file. Don’t use this code unless you changed the file name to the exact same thing #Use this code, w/o the &quot;#&quot; in front of it # eaglesPA &lt;- read.csv(file = &quot;eaglesPA.xlsx&quot;) #NOTE: I changed the name of the file to include &quot;_w_2_states&quot; so that I wouldn&#39;t overwrite the origina file. Don&#39;t use this code unless you changed the file name to the exact smame thing #eaglesPA &lt;- read.csv(file = &quot;./data/Lab1_data_PA_eaglesPA_w_2_states.csv&quot;) Type ls() to see what is now in your workspace ls() ## [1] &quot;eaglesPA&quot; &quot;image.file&quot; &quot;lynx&quot; &quot;lyxn.df&quot; &quot;par.default&quot; ## [6] &quot;par.mar&quot; &quot;sunspot.year&quot; &quot;x.lim&quot; Look at the re-loaded eaglesPA data object summary(eaglesPA) dim(eaglesPA) head(eaglesPA) tail(eaglesPA) "],["loading-data-from-csv-files-into-rstudio.html", "Chapter 27 Loading data from .csv files into RStudio 27.1 Introduction 27.2 Preliminary step: download a .csv file 27.3 Set the “working directory” (“WD”) in RStudio 27.4 Check the working directory with getwd() 27.5 Check for the file you downloaded with list.files() 27.6 OPTIONAL Interacting with R via the console or the source viewer 27.7 Loading data into R using read.csv() 27.8 Optional: Plot the Mendley 1998 data 27.9 Loading .csv files using RStudio [ ] 27.10 Challenge", " Chapter 27 Loading data from .csv files into RStudio Nathan Brouwer, Phd brouwern at gmail.com https://github.com/brouwern Twitter: lobrowR 27.1 Introduction We will be working with data from Table 2 of Medley and Clements (1998). (This data is featured in the ecological stats book by Quinn and Keough (2002), though I’m not a fan of how they analyse it.) The paper looks at how diatoms(photosynthesizing microorganisms known for their silica shells) are impacted by water quality in mountain streams. 27.1.1 Learning goals 27.1.2 Learning objectives By the end of this lesson students will be able to Download raw data files by hand from the internet Load .csv files using the R command read.csv() Load .csv files using RStudio’s point-and-click interface 27.1.3 R packageas 27.1.4 R commands read.csv View setwd getwd list.files read.csv ls dim names summary 27.1.5 Files Medley1998.csv 27.1.6 Potential Hangups 27.1.7 References Medley &amp; Clements. 1998. Responses of diatom communities to heavy metals in streams: The influence of longitudinal variation. [Ecological Applications 8:631-644.] (https://www.jstor.org/stable/2641255) Quinn &amp; Keough. 2002. Experimental design and data analysis for biologists.. A pdf version of the book is available online for free.. 27.2 Preliminary step: download a .csv file To load a .csv file into R we first need a .csv file to load. The data we’ll be working with can be downloaded from GitHub. First, go to the following link (it happens to be an obscure subfolder of the wildlifeR package) https://github.com/brouwern/wildlifeR/tree/master/inst/extdata Next, locate the file Medley1998.csv Figure 27.1: A list of files stored on GitHub. Click on it; a table will show up. Figure 27.2: An HTML .csv datafile store on GitHub. The raw file can be accessed by clicking on the Raw tab. This table is formatted to look nice on a webpage (using some HTML that GitHub impose on the file). We want the raw file itself. To get it we need to click on the “Raw” tab. Figure 27.3: A raw .csv datafile stored on GitHub. It can be downloaded By using Crtl+S or right clicking and selecting Save As We will then see what looks like a text document against a white background with no formatting of any kind. We can now download the file by following these steps. Either Use the shortcut Control + S to “Save as” the file Or Right click (on Mac:…) “Save link as” (or the equivalent) Then save the file to a location you know you can find, such as Documents Desktop Your network profile drive Note that if you try to “Save as…” anything else but the white-screen raw text file you will run into problems. After you download the file, open up Excel or another spreadsheet program and open up the file to confirm that what you downloaded is just a set of numbers. I you see long lines of text you might have accidentally downloaded the HTML-formatted version of the file. Make sure you are downloading the very plain version of the file from the totally blank white screen. 27.3 Set the “working directory” (“WD”) in RStudio We will now take the data we saved as a .csv file and load it into R. This can be tricky. First we need to tell R exactly where the file is by setting the working directory. Follow these steps: Click on “Session” on the main menu on the menu: “File, Edit, Code, View, Plots, Session, …” Click on “Set working directory” Select “Choose Directory” Select your computer’s Documents folder or wherever else you chose to save the file. Select the directory &amp; click “Open” Note that the command “setwd()” shows up in the console followed by the location of the directory you selected You can set your working directory to be anywhere on the computer. It is essential to make sure that the csv file you want to load into R is in your working directory. Depending on the location you chose you might just see “~/” or some other shorthand. 27.4 Check the working directory with getwd() You can confirm where you are at using the command getwd(); this can be handy if you’re not sure that you did things correctly or if R didn’t output what you expected. getwd() # [ ] ## [1] &quot;/Users/nlb24/OneDrive - University of Pittsburgh/0-books/getRdone-bk/getRdone&quot; Here, even though when set the working directory R originally just displayed “setwd(”~/“)”, I can now confirm that I’m in my documents folder. 27.5 Check for the file you downloaded with list.files() You can see what’s in your working directory using the command list.files(). Depending on how many files you have this could be a very long list. I have 40-ish files and so won’t display them. list.files() # [ ] If you have a ton of files being printed out you can narrow things down by telling R a text pattern to screen for. list.files(pattern = &quot;csv&quot;) # [ ] ## character(0) If the file wasn’t successful downloaded R will just give you a cryptic message like this. list.files(pattern = &quot;xxxx&quot;) This means the file isn’t’ there and you need to redo the download to make sure either i)the file actually downloaded and ii)file is saved where you want it to be. What we want to see is this ## character(0) 27.6 OPTIONAL Interacting with R via the console or the source viewer This section is optional You can enter R commands directly into the console, or type them into a script file in the source viewer and then execute. If you’ve just been using the console try this: Click on the source viewer pane in RStudio Type “getwd()” in the source viewer Click on the “Run” button in the upper Right part of the pane The getwd() command is sent over to the console and executed End optional section 27.7 Loading data into R using read.csv() Copy and paste the .csv file name from the console into the source viewer then Execute the command “read.csv(file =”Medley1998.csv”)“. You can type it but you must be careful to have NO TYPOS. R is unforgiving when it comes to typos. If you’ve done it correctly you’ll see the data table printed out in the console (I show only some of the output). read.csv(file = &quot;Medley1998.csv&quot;) You must have the file name in quotation marks and include the “.csv”. Any small error will cause things to not work. Here are examples of mistakes that won’t work (no matter how much you cuss at it.) read.csv(file = Medley1998.csv) #missing quotes &quot; &quot; read.csv(file = &quot;Medley1998.csv&quot;) #missing .csv read.csv(file &quot;Medley1998.csv&quot;) #missing = Note that R returns error messages in red, but they aren’t necessarily very helpful in figuring out what the problem actually is. This is an unfortunate feature of R, and reading error messages is a skill that must be learned. 27.7.1 Load data into an R “object” Now type this: “med98 &lt;- read.csv(file =”Medley1998.csv”)“. The”&lt;-” is the assignment operator. What happens when you execute this command? med98 &lt;- read.csv(file = &quot;Medley1998.csv&quot;) [ ] It might actually look like not much has happened. But that’s good! It means the data has successful been loaded into R. You have “assigned” the data from your file to the “object” named “med98” 27.7.2 The assignment operator “&lt;-” “&lt;-” is called the “assignment operator”. It is a special type of R command. “&lt;” usually shares The comma key. Type “shift + ,” To get it. If you type just “med98” and execute it as a command, what happens? med98 You should see the entire dataset spit out in the console (I’ve just shown the top part). Now execute the list command ls(). You should now see “med98” shown in the console. ls() ## [1] &quot;eaglesPA&quot; &quot;image.file&quot; &quot;lynx&quot; &quot;lyxn.df&quot; &quot;par.default&quot; ## [6] &quot;par.mar&quot; &quot;sunspot.year&quot; &quot;x.lim&quot; This means that the object you assigned your data is now in your “workspace.” The workspace is what I call the working memory of R. We can learn about the med98 data using command like dim(), names() and summary(). How big is the dataset overall? dim(med98) How man columns are there? names(med98) Are any of the variables categorical? summary(med98) 27.8 Optional: Plot the Mendley 1998 data The following section is optional As we’ll discuss in depth in a later section on plotting , one reason why the ggplot and ggpubr packages are so powerful is because they can easily plot things in good color schemes. We can make a basic scatter plot like this to show the positive correlation between Diatom species richness (the raw number of species identified in a given sample) on the x axis and species diversity on the y axis. First, load the ggpubr package using the library() command. Note that you might get some output in red text telling you about the packages; it looks scary but its not. library(ggpubr) ## Loading required package: ggplot2 Now plot the scatter plot. Note that the syntax for ggpubr requires that variables be contained within quotes. ggscatter(data = med98, y = &quot;spp.div&quot;,x = &quot;spp.rich&quot;) We can color-code the points by their pH ggscatter(data = med98, y = &quot;spp.div&quot;,x = &quot;spp.rich&quot;, color = &quot;pH&quot;) End optional section 27.9 Loading .csv files using RStudio [ ] Frequently in code I will have things written up to load data using the read.csv() command. However, there is a point-and-click way of loading spreadsheet data into RStudio too. There’s on pane in RStudio that doesn’t get used much by basic R users, the “Environment, History, Connections, Build, Git” pane (I think it might not have “Git” on it if you don’t have certain packages loaded). Figure 27.4: A list of files stored on GitHub. If you click on the spreadsheet-looking icon “Import Dataset” and select “From text (base)” you can navigate to where your .csv file is located and select it. A preview window will then pop up which will show you the raw (which should look like what you originally down loaded) and a preview of how RStudio will format the data. (If the preview doesn’t look right you can change some of the option in the drop down menus to see if things line up.) Figure 27.5: A list of files stored on GitHub. When you click “Import” RStudio will execute some code in the console (eg “Medley1998 &lt;- read.csv(”~/Medley1998.csv”)“) to load the data and then call the command View() to generate preview of the data in a new tab in the script view. (Note that this View panel only lets you look at the data; you can’t edit it.) 27.10 Challenge .csv files are the most common format for sharing data in R. “csv” stands for “comma seperate volume”, and you will note that each value on a line is seperated by a comma (some things with computers do make sense on the first try!). Sometimes you will encounter .txt files which separate data other ways, such as spaces, tabs, or by lining up everything explicitly in rows. On the wildlifeR GitHub directory we used before (https://github.com/brouwern/wildlifeR/tree/master/inst/extdata) these is a file “Medley1998.txt”. Download this file and load it using RStudio’s Import Dataset function. See if RStudio recognizes that its not .csv. "],["interactive-resources-for-learning-r.html", "Chapter 28 Interactive resources for learning R 28.1 RStudio Cloud Primers (FREE! Total beginners). 28.2 swirl Interactive Primers", " Chapter 28 Interactive resources for learning R Below is information about interactive tutorials that guide you step by step through introductory R sessions. 28.1 RStudio Cloud Primers (FREE! Total beginners). The RStudio cloud guided primers are probably the best intros out there right now. Their only deficiency is that there aren’t more at a really basic level. They’ll guide you step by step through basic R commands via a special web interface. https://rstudio.cloud/learn/primers The “basics” is good for everyone to try. If you are going to use ggplot2 for making graphs then “Visualize Data” is your next stop. If you need to be managing raw data and manipulating it into new forms, “Work with data” shows you how to use the dplyr package. 28.2 swirl Interactive Primers swirl is a system for running tutorials within the R console. R basically asks you questions and you type the answer. Information about downloading and using swirl can be found here: https://swirlstats.com/students.html 28.2.1 swirl quickstart: In the R console run these commands: install.packages(&quot;swirl&quot;) library(&quot;swirl&quot;) swirl::install_course(&quot;R Programming&quot;) swirl::install_course(&quot;The R Programming Environment&quot;) To get started type: swirl() swirl will guide you through the reset. Choose one of the R Programming tutorials. A cheatsheet to swirl commands and other info can be found here: https://docs.google.com/presentation/d/12cNq9VYEUFzzzQkNmRF2PgllW05-tVqoEux26jfygWw/edit?usp=sharing "],["r-learning-books.html", "Chapter 29 R Learning Books 29.1 Learning R for Bioinformatics 29.2 Learning R for Statistics 29.3 Learning how to load data into R 29.4 Resources for those with some background in statistics, data analysis or programming 29.5 Resources for those interested in programming", " Chapter 29 R Learning Books Below is a list of R resources for particular needs. Each one is excellent and will serve you well, However, each one has its limits, such as relying on base R graphics rather than ggplot2, throwing in complex coding into otherwise beginner material, etc. Find something that works for you, if you get stuck take a break or move to the next chapter, and find folks who you can ask questions. Twitter is very welcoming to people who post with the #rstats. I’ll often answer questions about R from complete strangers on Twitter or even via email. If you can find a coding Chapterner starting from a similar place that’s even better. A note on choosing a resource for learning R: People who want to learn R come from a wide range of backgrounds and have a wide range of goal. Many resources have names like “How to learn R for xxxx” but don’t specify up front what the author assumes the reader already knows. In my list below I try to add information about what factors might contribute to whether a resource might be good for you. Factors that are relevant to choosing where to start “learning R” include 1. How much statistics training have you had? There are many resources that start from the basics (mean, standard deviation, t-test), while others dive into more complex models without much warm up. 1. How much programming have you had? Everything in R is done using code, which can be a huge change for many folks who have used excel or point-and-click programs. 1. What kind of data have you worked with in the past? Some resources focus on working with data that is nice and tidy in a spread-sheet like format, while others get into the weeds on how to take messy data and get it ready for analysis. In general, most books and major R resources adopt a single approach to R coding and stick with it. It’s therefore useful to shop around a bit to find a resource that works for you and then work through an entire book or resource. It’s definitely possible to learn R by googling each step you take, but as noted above you’ll see lots of different ways to approach the same problem. Starting with a single resource and getting familiar with it will help you build a foundation of skills to build from. Be aware that as you branch out you’ll quickly encounter new approaches that look unfamiliar. 29.1 Learning R for Bioinformatics A good book for learning R for basic bioinformatics is Coghlan’s “A little book of R for bioinformatics” https://a-little-book-of-r-for-bioinformatics.readthedocs.io/en/latest/ (FREE! beginner to intermediate) This is a pretty gentle introduction, though there are a fair number of deeper chunks of code that you need to use to do all the exercises. Someone just starting with R should be able to learn a lot from this book. The book is a bit dated - several things she writes her own code for now are done in packages. The rentrez packages is one that replaces some of her code or updates older packages she uses. I have written updates for several chapters using rentrez and can provide the code upon request. 29.2 Learning R for Statistics Danielle Navarro is a psychologist whose book “Learning Statistics with R” is an excellent introduction to both R and statistics and assumes no prior experience with either. Chapters of book use a package written by Navvaro that is now a bit dated, and it also uses base R graphics instead of ggplot2, but otherwise, this is probably one of the best R resources out there. When I taught undergrad biostats I wish I had known about this book. https://learningstatisticswithr.com/ https://learningstatisticswithr.com/book/ (FREE! R: beginner; Statistics: beginner to intermediate) 29.3 Learning how to load data into R https://brouwern.github.io/BOOK_R_Ecological_Data_Science/ This is a workbook I’ve started writing. What’s currently available online most relates getting data loaded into R, which can often be one of the most difficult tasks to learn how to do correctly. It also has some material on. (FREE!. R: beginner) Learning R for Statistics ($60. 4.5/5 stars on Amazon. R: beginner. Statistics: beginner to intermediate) “Discovering Statistics Using R” Andy Field is a psychologist whose statistics books are oriented towards undergraduates with no programming experience and minimal stats. I have not looked at his books extensively but they generally get excellent reviews, though people frequently note the very juvenile/irreverent humor he uses. For example, one Amazon review noted “Writing is often bizarrely risqué; seems every chapter has multiple references to male sexual function”. People also note how verbose the book is - some complain that the anecdotes, stories, and potty humor distract from the material being taught. Other folks say that the filler material makes that math and stats easier to understand and get through. https://www.amazon.com/Discovering-Statistics-Using-Andy-Field/dp/1446200469/ref=sr_1_1?dchild=1&amp;keywords=andy+fields+R&amp;qid=1592242936&amp;sr=8-1 29.4 Resources for those with some background in statistics, data analysis or programming 29.4.1 Learning R for Ecological Statistics “Getting Started with R: An Introduction for Biologists 2nd.” ($35. 4.8/5 stars on Amazon. R: beginner. Statistics: intermediate) This is a short but excellent guide to using R which is accessible to anyone but oriented towards ecologists. The 2nd edition was re-written to use ggplot and the tidyverse. https://www.amazon.com/Getting-Started-R-Introduction-Biologists/dp/0198787847/ref=sr_1_5?dchild=1&amp;keywords=R+statistics+biology&amp;qid=1592243477&amp;sr=8-5 29.4.2 Learning R for general “data science” “R for data science” (R4DS) (Free. R: beginner-intermediate. Statistics: intermediate. Programming: Beginner-intermeidate) https://r4ds.had.co.nz/ This is a super popular text written by the most prominent R programmer, Hadely Wickham. Wickham created ggplot2 and dplyr and is the mastermide behind the tidyverse. R4DS teaches how to use these tools and Wickham’s general philosophy for data analysis. The book is not necessarily appropriate for total beginners because it moves pretty fast. It assumes the reader has worked with relatively complex data and done some intermediate statistics and now wants to do this in R. 29.5 Resources for those interested in programming 29.5.1 Learning R for programming/modeling “A Primer of Ecology With R” (Free/$60. 4.5/5 stars amazon. R: intermediate. Programming: Intermediate Ecology: Intermediate-advanced) This is the book I learned to program with. It does not explicitly set out to teach all the finer points of programming but contains examples of all major R programming structures (e.g. vectors, matrices, loops, functions, etc). If you have a background in programming then this book will help you translate your skills to R. If you don’t know any programming but are willing to invest some time, you can use this book to teach yourself programming. Some chapters are available free online. The book is also available free from the Pitt library. 29.5.2 Learning R for programming The Art of R Programming. ($30. 4.4/5 stars Amazon. R: intermediate to advanced. Programming: intermediate.) An excellent reference for programming. I feel this book is underrated in the R community. It has several flaws, such as some overly complex examples and mixing of beginner and complex concepts. It’s a book I still refer back to, though its coverage on some advanced topics like parallel computation is now dated. This book is probably best as a reference book for someone with solid beginner R programming skills who wants to expand into programming or someone who can program in a different language who wants to learn how R works. 29.5.3 Learning R for Epidemiological modeling Epidemics: Models and Data Using R ($60; R:intermediate-advanced. Programming: intermediate-advanced. Epidemiology: intermediate-advanced) A book that just came out and is highly relevant to current events. If you have some background in programming or are really interested in the topic this book is an excellent resource. There is also a MOOC associated with it. https://www.amazon.com/Epidemics-Models-Data-using-Use/dp/3319974866/ref=sr_1_fkmr0_1?crid=2SC2US02IF1QK&amp;dchild=1&amp;keywords=otter+bjornstad&amp;qid=1592244881&amp;sprefix=Ottar+Bj%2Caps%2C137&amp;sr=8-1-fkmr0 "],["rstudio-videos.html", "Chapter 30 RStudio videos 30.1 Basic 30.2 Intermediate 30.3 Intermediate-Advanced 30.4 Other interesting videos", " Chapter 30 RStudio videos RSTudio provides a number of videos to help you at various stages of your coding journey with R. 30.1 Basic Installing R: https://vimeo.com/203516510 Installing RStudio: https://vimeo.com/203516968 Installing packages:l https://vimeo.com/203516241 Also remember the RStudio Cloud Primers https://learnr-examples.shinyapps.io/ex-setup-r/#section-welcome 30.2 Intermediate RMarkdown https://rstudio.com/resources/webinars/getting-started-with-r-markdown/ RMarkdown Notebooks https://rstudio.com/resources/webinars/introducing-notebooks/ 30.3 Intermediate-Advanced Code smells and feels https://rstudio.com/collections/additional-talks/code-smells-and-feels-user2018-brisbane/ Programming in R https://rstudio.com/resources/webinars/programming-part-1-writing-code-in-rstudio/ 30.4 Other interesting videos Education theory for data science "],["appendix-rmarkdown.html", "Chapter 31 Appendix: RMarkdown 31.1 Key features of RMarkdown: heading tags and code chunks: 31.2 Code chunks 31.3 Other key features of RMarkdown 31.4 Markdown syntax", " Chapter 31 Appendix: RMarkdown R code is typically distributed in two file formats Plain-text R files (.R) RMarkdown file (.Rmd) The native format of R is the .R file. This is essentially a plain-text file that includes only R code and text that has been commented out. Any text that isn’t commented out is interpreted by R as R code. RMarkdown files also plain-text files that you can open in any text editor or even a word processor. However, RMarkdown files are written very differently. First, in RMarkdown code is written in specially flagged code chunks, while almost all descriptive text is written as you would normally write in a word processor, without any comments. This allows you to write text fluidly as you would in a word processor without laboriously commenting everything out as you go. 31.1 Key features of RMarkdown: heading tags and code chunks: The two most prominent and important features of RMarkdown documents are the hashtags used for indicating section headings and code chunks. 31.2 Code chunks 31.2.1 Code chunk tags Code chunks start with there apostrophes and {r}, like this: ```{r}. They end with three apostrophes```. They will appear gray when opened up in RStudio but be white in the normal R code editor or other text editor. You can add comments within code chunks with a hashtag as you normally would. 31.2.2 Code chunk controls When a code chunk occurs in a .Rmd file RStudio will add three controls to the far-right side of the chunk A gear A downward pointing gray triangle above a green bar A rightward facing triangle The second two controls are very useful. The triangle-bar button runs all the code that occurs into the .Rmd file up to the current point, while the rightward triangle runs the current chunk. 31.2.3 Source viewer controls RMarkdown and regular .R files are displayed in the source viewer (aka script editor). At the top of the source viewer are a number of buttons. Most you can ignore for basic usage, but two are helpful: File save button (“ABC” above a check mark”) Run this code (Green arrow pointing towards “Run”) 31.2.4 Running code in code chunks Code in code chunks can be run several different ways. First you need to indicate what code you want to run. This is done either by: Placing the cursor at the end of the line you want to run Highlighting the code you want to run; this can be more than 1 line Once you’ve selected the code you want to run you can tell RStudio to send the code over to the console to run it these ways: Click on the “Run” button at the top of the Source Viewer pane and select the first option, “Run selected lines”. Click on the rightward facing button of the chunk where the code is located. 31.2.5 Running multiple chunks You can also run multiple chunks. Specifically, you can run all the code from the start of the file to your current position. First, identify the code you want to run. Second, click your cursor into the next chunk after that code. All of the code preceding your current chunk can the be run by Clicking on the Run icon above the editor and selecting “Run all chunks above”. Clicking on the triangle-bar button within that chunk. A common problem when working with R scripts is that while reading code and comments you accidentally skip a bit of code and things stop working. The ability to run all previous code This is a very useful way to make sure you’ve run the necessary code before proceeding further into a script. 31.2.6 Headers Titles and section headings are tagged with hashtags in RMarkdown. Line of text preceded by one to four-ish hashtags are rendered in larger font and in some cases auto-numbered. # Title ## Section heading ### Sub-section 31.3 Other key features of RMarkdown 31.3.1 The “YAML” Header At the top of most Rmarkdown files are what is called the YAML header. The header always begins with three dashes (—) and ends with three dashes. Keywords between these two sets of dashes defines things like a title, author date, and other meta-data and controls. The presence and contents of the YAML header vary depending on a number of factors; generally speaking don’t touch anything except the title and author information. 31.3.2 Knitting RMarkdown files can be knit into HTML web pages, Word Documents, and – given a bit of setup – PDFs. Click on the “Knit” button at top of the Source Viewer and select the desired format. 31.4 Markdown syntax RMarkdown is a special implementation of a more general markup language called markdown. markdown was created as a light-weight alternative to HTML for creating documents and web pages. Within written text of RMarkdown documents you’ll see various elements which create special formatting when the .RMd file is rendered. These principally are Bold and italic font Bulleted and numbered lists If you’ve been given a .Rmd file and need to run the code you can ignore anything that seems out of place like asterisks. *Italics* Italics **Bold** Bold _underlined_ _underlined superscript 2^2^ 22 Other features you may encounter include full equations and short bits of HTML code. For a list of RMarkdown tags see the RStudio RMarkdown cheat sheet here: https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf "],["getting-set-up-for-rendering-rmarkdown-documents.html", "Chapter 32 Getting set up for rendering RMarkdown documents", " Chapter 32 Getting set up for rendering RMarkdown documents Get yourself set up for using RMarkdown and rendering .Rmd files to webpages. Outline of steps Click on File-&gt;New File-&gt;RMarkdown Give the document a title and click “ok” Save the .Rmd file. Give it a name like “test” or “temp” Click on the “Knit” button at the top of the script viewer pane. If prompted to install packages click ok (see video for more info) As shown in the video a webpage should be generated. RMarkdown is rendering properly! This video will walk you through the steps Cheatsheet https://docs.google.com/presentation/d/1vEZldZJuF6umq8uRUNjsd8bJgJFBDibeDOgdII_uUX4/edit?usp=sharing Figure 32.1: Be an Rmarkdown knitting wizard, by Allison Horst) "],["the-different-faces-of-r-code-the-console-scripts-rmarkdown.html", "Chapter 33 The different faces of R code: The console, scripts &amp; RMarkdown 33.1 The console 33.2 Scripts 33.3 Organizing scripts 33.4 RMarkdown", " Chapter 33 The different faces of R code: The console, scripts &amp; RMarkdown To Do: Change example - currently focuses on t-test using Welch’s correction There are a number of ways to interact with R Directly in the console, like a scientific calculator Using script files (.R) with R code types out and sent over to the console notes “commented out” using hashtags “#” rmarkdown (.Rmd) files with R code in species code chunks notes written like in a word processor formatting using markdown, a markup language This chapter will briefly introduce these different ways of working in R 33.1 The console In a previous chapter we introduced the console. You can interact with the console in a similar manner as a scientific calculator. (#fig:first.chnk.sxn1ch4)The RStudio console As you execute more commands, they move up the screen. You can scroll back up to see what you’ve done previously. 33.2 Scripts You can create a record of the commands you have executed in the console by copying and pasting or by downloading a log file RStudio creates, but these aren’t very efficient ways to work. If you want to keep track of the commands you’re running (and often you do) its best to write them in a script file and then send them over to the console to execute the code. 33.2.1 Creating scripts When you open RStudio a blank script file will be open. Subsequently, RStudio will open files you have worked with previously. To create a new blank script file: Click on File New File R script or just type control + shift + N (on a PC) or command + shift + N on (Mac), which is similar how you make a new document in most programs. Figure 33.1: Creating a new R script file You can create or open multiple scripts, which RStudio organizes as tabs like in a web browser. Figure 33.2: R Script file with comments in RStudio 33.2.2 Running code from a script To run a code you can either place click to the right of the line of code and click the “run” button. Figure 33.3: Running code using RStudios RUN button. Note cursor to the right of the code You can also highlight the code by clicking and dragging over it. This is useful when you have multiple lines of code. Figure 33.4: Highlighted code in an RStudio script 33.2.3 Running code with keyboard shortcuts Want to look like an R pro? Learn keyboard shortcuts so you don’t have to use the mouse. Both of the above methods work using simple keyboard shortcuts: PCs: Control + Enter Macs: Command + Enter Another handy shortcut is “Control + 2”, which moves your computer’s cursor from the script editor to the console. (Control + 2 moves it from console to editor) 33.3 Organizing scripts “You mostly collaborate with yourself, and me-from-two-months-ago never responds to email.” (Karen Cranston, paraphrasing Mark Holder; quoted by Megan Duffy on dynamicecology) Script files perform a record of your work so you can remember what you did re-run it to check things re-use your code for new analyses track down errors (which will happen!) share with collaborators Script files are not unique to R, but the R community seems to have built up a particularly good infrastructure for their implementation and ethos encouraging their use. Megan Duffey at Dynamic Ecology has an excellent post on this. When you first start out learning R most of your scripts will be disposable. Quickly you’ll want to start keeping track of the code you write in class to refer back to. When you start doing analyses you’ll want to write comments as you go, and provide details at the top of your file so you can quickly get up to speed when you come back to the file. 33.3.1 What to include in a script A good R script should be a self-sufficient document that your future self can easily make sense of, or better yet, someone starting from scratch can understand. Depending on the exact purpose, things to include might be A general title, such as “R Script: data exploration &amp;t-test for analysis of frog arm girth” Who wrote it and their contact info When the script was created when it was most recently accessed or created What data it uses and where it comes from What project or paper it relates to A challenge when writing and maintaining R scripts is that you are often actively engaged in learning R, learning stats, and learning about or exploring your data. So you write a lot of code then erase it, or scratch out code in a script and then move on. While I have written and saved many scripts that I have never re-opened, I have never re-opened a script and said “wow, I went WAY overboard annotating this thing!” ALso, commenting code makes it much easier to read; I often add fairly simple comments to make code easier navigate and to break things up into smaller chunks. So, at a minimum I think every script should Have some kind of header saying what it is and when it was made Have one line of comments or annotations for every 3 to 5 lines of code. 33.3.2 Formatting sections in R scripts To make scripts easier to navigate its useful to strong together the comment character “#” to make dividers and boxes. This is very good practice to make code more readable. It can be a bit tedious at times to do this; one advantage of rmarkdown, which we’ll introduce at the end of this chapter and go into further in the next, is that it makes it very easy to format section titles. 33.3.3 A sample R script On the following pages are examples of R scripts for a formal analysis of a dataset. First I’ll show what the script might look like as I write it. Then I’ll show how I’ll fix it up once I know its something I am going to look back at in the future. ### R Script: Analysis of frog arm girth ## Nathan Brouwer (brouwern@gmail.com) ## 6/6/2018 ## update: 8/17/2018 ## I am re-running analysis from paper by Buzatto et al 2015 ## I want to compare the results of a t-test with ## and w/o Welch&#39;s correction for unequal variation ## Packages library(wildlifeR) ## Data set up # load frogarm data from Buzatto et al 2015 data(&quot;frogarms&quot;) ## Data visualization # histogram of all data hist(frogarms$sv.length) ## Data analysis # unpaired t-test NOT using Welch&#39;s correction ## NOTE: assumes variation within each group EQUAL t.test(sv.length ~ sex, # model formula var.equal = TRUE, # set variances to equal data = frogarms) # data # unpaired t-test &gt;&gt;using&lt;&lt; Welch&#39;s correction t.test(sv.length ~ sex, var.equal = FALSE, # set variances to be unequal data = frogarms) 33.3.4 A polished R script ########################################### ### ### R Script: Analysis of frog arm girth ### ########################################### ## Author: Nathan Brouwer (brouwern@gmail.com) ## Creation: 6/6/2018 ## Last update: 8/17/2018 ############### ## Introduction ############### # This script is an analysis of frog body size and arm girth ## I am re-running analysis from paper by Buzatto et al 2015 ## I want to compare the results of a t-test with ## and w/o Welch&#39;s correction for unequal variation # Data were originally from # Buzatto et al 2015. Sperm competition and the evolution of # precopulatory weapons: Increasing male density promotes # sperm competition and reduces selection on arm strength in # a chorusing frog. Evolution 69: 2613-2624. # https://doi.org/10.1111/evo.12766 # Data originally downloaded on 6/6/2018 from # https://figshare.com/articles/Data_Paper_Data_Paper/3554424 # Data are included in the wildlifeR package and load from it # https://github.com/brouwern/wildlifeR ############### ## Packages ############### library(wildlifeR) ############### ## Data set up ############### # load frogarm data from Buzatto et al 2015 data(&quot;frogarms&quot;) ###################### ## Data visualization ###################### # histogram of all data hist(frogarms$sv.length) ###################### ## Data analysis ###################### # unpaired t-test NOT using Welch&#39;s correction ## NOTE: assumes variation within each group EQUAL t.test(sv.length ~ sex, # model formula var.equal = TRUE, # set variances to equal data = frogarms) # data # unpaired t-test &gt;&gt;using&lt;&lt; Welch&#39;s correction t.test(sv.length ~ sex, var.equal = FALSE, # set variances to be unequal data = frogarms) For more on organizing scripts see points 4 and 5 of “Eight things I do to make my open research more findable and understandable” at (DataColada](http://datacolada.org/69). 33.4 RMarkdown "],["deeperfnxns.html", "Chapter 34 Goind deeper with functions and arguments", " Chapter 34 Goind deeper with functions and arguments For in-depth information on how functions work in R see the following resources Ihaka, R. n.d. “R Functions Things Your Mother (Probably) Didn’t Tell You About”. https://www.stat.auckland.ac.nz/~ihaka/downloads/Waikato-WRUG.pdf Wickham, H. 2019. Advanced R 2nd ed., Chapter 6: Functions. https://adv-r.hadley.nz/functions.html "],["rs-installation-directory-and-working-directory.html", "Chapter 35 R’s Installation directory and “working directory”", " Chapter 35 R’s Installation directory and “working directory” When using R there are several levels of where software, files, and R’s working memory are located and organized. First, R is a program that lives on your hard drive. Occasionally it may get installed someplace we don’t want. We can check where R is located using the R.home() function. This isn’t a commonly used function but is useful for troubleshooting problems. Second, when R is running it has a working directory where any files you save will be stored. You can check where your working directory is using get.wd(). When you get started, you don’t have to worry much about this, but eventually, it will be very important to make sure you know where your files are going so you can find them back! Using R Projects managed with RStudio is very useful when the time comes to do this. Third, often in R we create objects (sometimes called variables) which contain information. These are made using R’s assignment operator: &lt;-, which is a “less than” sign and a dash (or an alligator eating a jumping fish, whichever you prefer). To assign something to R’s working memory I do this my.object &lt;- &quot;something&quot; I can see everything I’ve assigned to R’s working memory using the command ls(). ls() ## [1] &quot;eaglesPA&quot; &quot;image.file&quot; &quot;lynx&quot; &quot;lyxn.df&quot; &quot;my.object&quot; ## [6] &quot;par.default&quot; &quot;par.mar&quot; &quot;sunspot.year&quot; &quot;x.lim&quot; This video covers similar topics The code used in the video is below. You can just copy and paste it into your R console if you have any trouble. my.name &lt;- &quot;Your name&quot; #character string is(my.name) my.name home &lt;- R.home() home wd &lt;- getwd() wd ls() "],["understanding-data-helpfiles.html", "Chapter 36 Understanding data helpfiles", " Chapter 36 Understanding data helpfiles "]]
